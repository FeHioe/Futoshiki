#Look for #IMPLEMENT tags in this file. These tags indicate what has
#to be implemented.

'''
Construct and return Futoshiki CSP models.
'''

from cspbase import *
import itertools

def futoshiki_csp_model_1(initial_futoshiki_board):
    '''Return a CSP object representing a Futoshiki CSP problem along with an
    array of variables for the problem. That is return

    futoshiki_csp, variable_array

    where futoshiki_csp is a csp representing futoshiki using model_1 and
    variable_array is a list of lists

    [ [  ]
      [  ]
      .
      .
      .
      [  ] ]

    such that variable_array[i][j] is the Variable (object) that you built to
    represent the value to be placed in cell i,j of the futoshiki board
    (indexed from (0,0) to (n-1,n-1))


    The input board is specified as a list of n lists. Each of the n lists
    represents a row of the board. If a 0 is in the list it represents an empty
    cell. Otherwise if a number between 1--n is in the list then this
    represents a pre-set board position.

    Each list is of length 2n-1, with each space on the board being separated
    by the potential inequality constraints. '>' denotes that the previous
    space must be bigger than the next space; '<' denotes that the previous
    space must be smaller than the next; '.' denotes that there is no
    inequality constraint.

    E.g., the board

    -------------------
    | > |2| |9| | |6| |
    | |4| | | |1| | |8|
    | |7| <4|2| | | |3|
    |5| | | | | |3| | |
    | | |1| |6| |5| | |
    | | <3| | | | | |6|
    |1| | | |5|7| |4| |
    |6> | |9| < | |2| |
    | |2| | |8| <1| | |
    -------------------
    would be represented by the list of lists

    [[0,'>',0,'.',2,'.',0,'.',9,'.',0,'.',0,'.',6,'.',0],
     [0,'.',4,'.',0,'.',0,'.',0,'.',1,'.',0,'.',0,'.',8],
     [0,'.',7,'.',0,'<',4,'.',2,'.',0,'.',0,'.',0,'.',3],
     [5,'.',0,'.',0,'.',0,'.',0,'.',0,'.',3,'.',0,'.',0],
     [0,'.',0,'.',1,'.',0,'.',6,'.',0,'.',5,'.',0,'.',0],
     [0,'.',0,'<',3,'.',0,'.',0,'.',0,'.',0,'.',0,'.',6],
     [1,'.',0,'.',0,'.',0,'.',5,'.',7,'.',0,'.',4,'.',0],
     [6,'>',0,'.',0,'.',9,'.',0,'<',0,'.',0,'.',2,'.',0],
     [0,'.',2,'.',0,'.',0,'.',8,'.',0,'<',1,'.',0,'.',0]]


    This routine returns Model_1 which consists of a variable for each cell of
    the board, with domain equal to [1,...,n] if the board has a 0 at that
    position, and domain equal [i] if the board has a fixed number i at that
    cell.

    Model_1 also contains BINARY CONSTRAINTS OF NOT-EQUAL between all relevant
    variables (e.g., all pairs of variables in the same row, etc.).

    All of the constraints of Model_1 MUST BE binary constraints (i.e.,
    constraints whose scope includes two and only two variables).
    '''
    board = len(initial_futoshiki_board);
    
    #Find variable list
    var_list = [];
    for i in range(board):
        column = [];
        for col in range(board):
            if (initial_futoshiki_board[i][col*2] == 0):
                column.insert(len(column), Variable('-V {} {}-'.format(i, col), range(1, board+1)));
            else:
                column.insert(len(column), Variable('-V {},{}-'.format(i, col), [initial_futoshiki_board[i][col*2]]));

        var_list.insert(len(var_list), column);    
    
    #Make CSP
    futo = CSP('f{}'.format(board));
    for i in range(len(var_list)): 
        for v in var_list[i]:
            futo.add_var(v);  
    csp = futo;
    
    #Filter inequalities
    dot = [];
    less = [];
    greater = [];
    
    for x in range(1, board + 1):
        for y in range(1, board + 1):
            if (x != y):
                dot.append((x,y));
            if (x < y):
                less.append((x,y));
            if (x > y):
                greater.append((x,y));

    #Inequality constraints
    for i in range(board):
            for x in range(board):
                for y in range(x + 1, board):
                    con = Constraint('C - V({},{}) V({},{})'.format(i, x, i, y), (var_list[i][x], var_list[i][y]));
                    if ((y == (x + 1)) and (initial_futoshiki_board[i][(x*2)+1] == '>')):
                        con.add_satisfying_tuples(greater);

                    elif ((y == (x + 1)) and (initial_futoshiki_board[i][(x*2)+1] == '<')):
                        con.add_satisfying_tuples(less);
                    else:
                        con.add_satisfying_tuples(dot);
                        
                    csp.add_constraint(con);
        
    #Column constraints
    for col in range(board):
        for x in range(board):
            for y in range(x + 1, board):
                con = Constraint('C - V({},{}) V({},{})'.format(x, col, y, col), (var_list[x][col], var_list[y][col]));
                con.add_satisfying_tuples(dot);
                csp.add_constraint(con);

    return (csp, var_list);

def futoshiki_csp_model_2(initial_futoshiki_board):
    '''Return a CSP object representing a futoshiki CSP problem along with an
    array of variables for the problem. That is return

    futoshiki_csp, variable_array

    where futoshiki_csp is a csp representing futoshiki using model_2 and
    variable_array is a list of lists

    [ [  ]
      [  ]
      .
      .
      .
      [  ] ]

    such that variable_array[i][j] is the Variable (object) that you built to
    represent the value to be placed in cell i,j of the futoshiki board
    (indexed from (0,0) to (n-1,n-1))

    The input board takes the same input format (a list of n lists of size 2n-1
    specifying the board) as futoshiki_csp_model_1.

    The variables of Model_2 are the same as for Model_1: a variable for each
    cell of the board, with domain equal to [1,...,n] if the board has a 0 at
    that position, and domain equal [n] if the board has a fixed number i at
    that cell.

    However, Model_2 has different constraints. In particular, instead of
    binary non-equals constaints Model_2 has 2*n all-different constraints:
    all-different constraints for the variables in each of the n rows, and n
    columns. Each of these constraints is over n-variables (some of these
    variables will have a single value in their domain). Model_2 should create
    these all-different constraints between the relevant variables, and then
    separately generate the appropriate binary inequality constraints as
    required by the board. There should be j of these constraints, where j is
    the number of inequality symbols found on the board.  
    '''
    board = len(initial_futoshiki_board);
    
    #Find variable list
    var_list = [];
    for i in range(board):
        column = [];
        for col in range(board):
            if (initial_futoshiki_board[i][col*2] == 0):
                column.insert(len(column), Variable('-V {} {}-'.format(i, col), range(1, board+1)));
            else:
                column.insert(len(column), Variable('-V {},{}-'.format(i, col), [initial_futoshiki_board[i][col*2]]));

        var_list.insert(len(var_list), column);    
    
    #Make CSP
    futo = CSP('f{}'.format(board));
    for i in range(len(var_list)): 
        for v in var_list[i]:
            futo.add_var(v);  
    csp = futo;

    #Filter inequalities
    dot = get_tuples(board);
    less = [];
    greater = [];
    for x in range(1, board + 1):
        for y in range(x, board + 1):
            if (x < y):
                less.append((x,y));
                greater.append((y,x));

    #Inequality constraint
    for i in range(board):
        for x in range(board):
            for y in range(x + 1, board):
                con = Constraint('C - V({},{}) V({},{})'.format(i, x, i, y), (var_list[i][x], var_list[i][y]));
                if ((y == (x + 1)) and (initial_futoshiki_board[i][(x*2)+1] == '>')):
                    con.add_satisfying_tuples(greater);
                    csp.add_constraint(con);
                elif ((y == (x + 1)) and (initial_futoshiki_board[i][(x*2)+1] == '<')):
                    con.add_satisfying_tuples(less);
                    csp.add_constraint(con);
    
    #Scope constraint
    for i in range(board):
        scope = [];
        for col in range(board):
            scope.append(var_list[i][col]);

        con = Constraint('Scope Constraint {}'.format(i), tuple(scope));
        con.add_satisfying_tuples(dot);
        csp.add_constraint(con);    
    
    #Column constraint
    for col in range(board):
        scope = [];
        for i in range(board):
            scope.append(var_list[i][col]);
        con = Constraint('Column Constraint {}'.format(col), tuple(scope));
        con.add_satisfying_tuples(dot);
        csp.add_constraint(con);
    
    return (csp, var_list);

def get_tuples(board, tup=[[1]]): 
    if (len(tup[0]) != board):
        recurse = [];
        
        for i in tup:
            for v in range(0, (len(i) + 1)):
                tup_copy = i[:];
                tup_copy.insert(v, len(tup[0]) + 1);
                recurse.append(tup_copy);
        return get_tuples(board, recurse);
    else:
        dot = [];
        for i in tup:
            dot.append(tuple(i));
        return dot;